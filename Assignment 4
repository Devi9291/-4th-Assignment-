import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats

# Generate dataset
np.random.seed(42)
heights = np.random.normal(loc=170, scale=10, size=50)
weights = np.random.normal(loc=70, scale=15, size=50)
data = pd.DataFrame({'Height': heights, 'Weight': weights})

# Descriptive Statistics
descriptive_stats = data.describe()
print("Descriptive Statistics:")
print(descriptive_stats)

# Probability
threshold_height = 180
probability_taller_than_threshold = len(data[data['Height'] > threshold_height]) / len(data)
print("\nProbability of being taller than", threshold_height, ":", probability_taller_than_threshold)

# Distributions
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plt.hist(data['Height'], bins=10, color='skyblue', edgecolor='black')
plt.title('Height Distribution')
plt.xlabel('Height')
plt.ylabel('Frequency')

plt.subplot(1, 2, 2)
plt.hist(data['Weight'], bins=10, color='salmon', edgecolor='black')
plt.title('Weight Distribution')
plt.xlabel('Weight')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

# Inferential Statistics - Central Limit Theorem (CLT)
sample_means = []
for _ in range(1000):
    sample = np.random.choice(data['Height'], size=30, replace=False)
    sample_means.append(np.mean(sample))

plt.figure(figsize=(6, 4))
plt.hist(sample_means, bins=30, color='lightgreen', edgecolor='black')
plt.title('Distribution of Sample Means (CLT)')
plt.xlabel('Sample Mean')
plt.ylabel('Frequency')
plt.show()

# Confidence Intervals (CI)
confidence_interval = stats.norm.interval(0.95, loc=np.mean(data['Weight']), scale=stats.sem(data['Weight']))
print("\n95% Confidence Interval for Weight Mean:", confidence_interval)

# Hypothesis Testing
# Null Hypothesis: Mean height is equal to 170
# Alternative Hypothesis: Mean height is different from 170
t_stat, p_value = stats.ttest_1samp(data['Height'], 170)
print("\nHypothesis Testing:")
print("T-statistic:", t_stat)
print("P-value:", p_value)
if p_value < 0.05:
    print("Reject null hypothesis")
else:
    print("Fail to reject null hypothesis")

# Critical Regions, Level of Significance, and Error Types
# Critical region: t < -t_critical or t > t_critical (for two-tailed test)
level_of_significance = 0.05
t_critical = stats.t.ppf(1 - level_of_significance / 2, df=len(data) - 1)
print("\nCritical Region for Two-Tailed Test:", (-t_critical, t_critical))

# Error types: Type I error (rejecting null when it's true) and Type II error (failing to reject null when it's false)

# Feature Selection Using P-values
# Null Hypothesis: Variable is not a significant predictor
# Alternative Hypothesis: Variable is a significant predictor
t_stat_weight, p_value_weight = stats.ttest_ind(data['Weight'], np.zeros_like(data['Weight']))
print("\nP-value for Weight as a Predictor:", p_value_weight)
if p_value_weight < 0.05:
    print("Variable 'Weight' is a significant predictor")
else:
    print("Variable 'Weight' is not a significant predictor")
